{"version":3,"sources":["pages/Home.js","utils/mutations.js","utils/auth.js","pages/Login.js","pages/Signup.js","pages/Search.js","components/Header/Header.js","components/Footer.js","utils/queries.js","components/PlaceForm.js","pages/Profile.js","pages/PlaceDetails.js","pages/NotFound.js","App.js","reportWebVitals.js","utils/theme.js","index.js"],"names":["Home","align","justify","base","md","xl","direction","wrap","minH","mb","spacing","w","sm","size","fontSize","textAlign","opacity","fontWeight","lineHeight","href","variant","colorScheme","mt","type","color","LOGIN_USER","gql","ADD_USER","ADD_PLACE","decode","this","getToken","token","isTokenExpired","exp","Date","now","localStorage","removeItem","getItem","idToken","setItem","window","location","assign","reload","Login","props","useState","email","password","formState","setFormState","useMutation","login","error","data","handleChange","event","target","name","value","handleFormSubmit","a","preventDefault","console","log","variables","Auth","status","mr","onSubmit","id","isRequired","placeholder","className","onChange","message","Signup","username","addUser","Search","Header","useDisclosure","isOpen","onOpen","onClose","h","alignItems","justifyContent","icon","Close","Hamburger","display","onClick","loggedIn","logout","pb","Footer","QUERY_USER","QUERY_SINGLE_PLACE","QUERY_ME","PlaceForm","placeName","placeRating","placeLocation","placeType","placeComment","addPlace","position","right","top","as","Profile","userParam","useParams","useQuery","loading","user","me","getProfile","to","PlaceDetails","placeId","place","p","NotFound","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","cookies","ApolloProvider","maxW","px","m","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","extendTheme","fonts","config","initialColorMode","useSystemColorMode","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5924aa27.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Flex,\n  Heading,\n  Button,\n  Link,\n  Box,\n  Stack,\n  Center,\n  Text,\n} from \"@chakra-ui/react\";\nimport { FaWaveSquare } from \"react-icons/fa\";\n\nconst Home = () => {\n  return (\n    <Flex\n      align=\"center\"\n      justify={{ base: \"center\", md: \"space-around\", xl: \"space-between\" }}\n      direction={{ base: \"column-reverse\", md: \"row\" }}\n      wrap=\"no-wrap\"\n      minH=\"65vh\"\n      mb={16}\n    >\n      <Stack\n        spacing={4}\n        w={{ base: \"60%\", sm: \"60%\", md: \"60%\" }}\n        align={[\"center\", \"center\", \"flex-start\", \"flex-start\"]}\n      >\n        <Heading\n          size={\"4xl\"}\n          fontSize=\"100\"\n          textAlign={[\"center\", \"center\", \"left\", \"left\"]}\n        >\n          HEARO\n        </Heading>\n\n        <Text\n          size={\"lg\"}\n          fontSize=\"25\"\n          opacity=\"0.8\"\n          fontWeight=\"normal\"\n          lineHeight={1.5}\n          textAlign={[\"center\", \"center\", \"left\", \"left\"]}\n        >\n          Find quiet places to socialise in Sydney.\n        </Text>\n        <Center>\n          <Link href=\"/search\">\n            <Button\n              variant={\"solid\"}\n              colorScheme={\"teal\"}\n              size={\"md\"}\n              mt={5}\n              type=\"submit\"\n            >\n              Search\n            </Button>\n          </Link>\n        </Center>\n      </Stack>\n\n      <Box w={{ base: \"40%\", sm: \"40%\", md: \"40%\" }} mb={{ base: 12, md: 0 }}>\n        <FaWaveSquare color={\"#81e6d9\"} size={{ base: 200 }} />\n      </Box>\n    </Flex>\n  );\n};\n\nexport default Home;\n","import { gql } from \"@apollo/client\";\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_PLACE = gql`\n  mutation addPlace(\n    $placeName: String!\n    $placeLocation: String!\n    $placeType: String!\n    $placeComment: String!\n    $placeRating: String!\n  ) {\n    addPlace(\n      placeName: $placeName\n      placeLocation: $placeLocation\n      placeType: $placeType\n      placeComment: $placeComment\n      placeRating: $placeRating\n    ) {\n      placeName\n      placeLocation\n    }\n  }\n`;\n","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    const token = this.getToken();\n    // If there is a token and it's not expired, return `true`\n    return token && !this.isTokenExpired(token) ? true : false;\n  }\n\n  isTokenExpired(token) {\n    // Decode the token to get its expiration time that was set by the server\n    const decoded = decode(token);\n    // If the expiration time is less than the current time (in seconds), the token is expired and we return `true`\n    if (decoded.exp < Date.now() / 1000) {\n      localStorage.removeItem('id_token');\n      return true;\n    }\n    // If token hasn't passed its expiration time, return `false`\n    return false;\n  }\n\n  getToken() {\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    localStorage.removeItem('id_token');\n    window.location.reload();\n  }\n}\n\nexport default new AuthService();\n","import React, { useState } from \"react\";\nimport {\n  Heading,\n  Box,\n  Input,\n  FormControl,\n  FormLabel,\n  Button,\n  Text,\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  AlertDescription,\n} from \"@chakra-ui/react\";\n\n// import { Link } from \"react-router-dom\";\nimport { useMutation } from \"@apollo/client\";\nimport { LOGIN_USER } from \"../utils/mutations\";\n\nimport Auth from \"../utils/auth\";\n\nconst Login = (props) => {\n  const [formState, setFormState] = useState({ email: \"\", password: \"\" });\n  const [login, { error, data }] = useMutation(LOGIN_USER);\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n    try {\n      const { data } = await login({\n        variables: { ...formState },\n      });\n\n      Auth.login(data.login.token);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      email: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    <Box>\n      {data ? (\n        <Alert status=\"success\">\n          <AlertIcon />\n          <AlertTitle mr={2}>Success!</AlertTitle>\n          <AlertDescription>You have logged in!</AlertDescription>\n        </Alert>\n      ) : (\n        <form onSubmit={handleFormSubmit}>\n          <Heading mb={10}>Login</Heading>\n          <FormControl id=\"email\" isRequired>\n            <FormLabel>Email</FormLabel>\n            <Input\n              placeholder=\"email\"\n              name=\"email\"\n              className=\"form-input\"\n              type=\"email\"\n              value={formState.email}\n              onChange={handleChange}\n            />\n          </FormControl>\n          <FormControl mt={5} id=\"password\" isRequired>\n            <FormLabel>Password</FormLabel>\n            <Input\n              placeholder=\"password\"\n              className=\"form-input\"\n              name=\"password\"\n              type=\"password\"\n              value={formState.password}\n              onChange={handleChange}\n            />\n          </FormControl>\n          <Button\n            variant={\"solid\"}\n            colorScheme={\"teal\"}\n            size={\"md\"}\n            mt={5}\n            type=\"submit\"\n          >\n            Login\n          </Button>\n        </form>\n      )}\n\n      {error && <Text>{error.message}</Text>}\n    </Box>\n  );\n};\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport {\n  Heading,\n  Box,\n  Input,\n  FormControl,\n  FormLabel,\n  Button,\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  AlertDescription,\n} from \"@chakra-ui/react\";\nimport { useMutation } from \"@apollo/client\";\nimport { ADD_USER } from \"../utils/mutations\";\nimport Auth from \"../utils/auth\";\n\nconst Signup = () => {\n  const [formState, setFormState] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n  });\n  const [addUser, { error, data }] = useMutation(ADD_USER);\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n\n    try {\n      const { data } = await addUser({\n        variables: { ...formState },\n      });\n\n      Auth.login(data.addUser.token);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return (\n    <Box>\n      {data ? (\n        <Alert status=\"success\">\n          <AlertIcon />\n          <AlertTitle mr={2}>Success!</AlertTitle>\n          <AlertDescription>You have created an account!</AlertDescription>\n        </Alert>\n      ) : (\n        <form onSubmit={handleFormSubmit}>\n          <Heading mb={10}>Create an account</Heading>\n          <FormControl id=\"name\" isRequired>\n            <FormLabel>Name</FormLabel>\n            <Input\n              placeholder=\"name\"\n              className=\"form-input\"\n              name=\"username\"\n              type=\"text\"\n              onChange={handleChange}\n              value={formState.name}\n            />\n          </FormControl>\n          <FormControl mt={5} id=\"email\" isRequired>\n            <FormLabel>Email</FormLabel>\n            <Input\n              placeholder=\"email\"\n              className=\"form-input\"\n              name=\"email\"\n              type=\"email\"\n              onChange={handleChange}\n              value={formState.email}\n            />\n          </FormControl>\n          <FormControl mt={5} id=\"password\" isRequired>\n            <FormLabel>Password</FormLabel>\n            <Input\n              placeholder=\"*****\"\n              className=\"form-input\"\n              name=\"password\"\n              type=\"password\"\n              onChange={handleChange}\n              value={formState.password}\n            />\n          </FormControl>\n          <Button\n            variant={\"solid\"}\n            colorScheme={\"teal\"}\n            size={\"md\"}\n            mt={5}\n            type=\"submit\"\n          >\n            Signup\n          </Button>\n        </form>\n      )}\n      {error && (\n        <Alert status=\"error\">\n          <AlertDescription>{error.message}</AlertDescription>\n        </Alert>\n      )}\n    </Box>\n  );\n};\n\nexport default Signup;\n","import React from \"react\";\nimport {\n  Heading,\n  Flex,\n  Button,\n  FormLabel,\n  FormControl,\n  Select,\n} from \"@chakra-ui/react\";\n\nconst Search = () => {\n  return (\n    <form>\n      <Flex align=\"center\" justify=\"space-between\" wrap=\"wrap\" w=\"100%\">\n        <Heading mb={5}>Search for a quiet place in Sydney</Heading>\n        {/* <FormControl id=\"postcode\" isRequired>\n          <FormLabel>Suburb</FormLabel>\n          <Input id=\"autocomplete\" placeholder=\"suburb\" />\n        </FormControl> */}\n        <FormControl id=\"place\" mt={5}>\n          <FormLabel>Type of place</FormLabel>\n          <Select placeholder=\"Select type of place\">\n            <option>Restaurant</option>\n            <option>Bar</option>\n            <option>Pub</option>\n          </Select>\n        </FormControl>\n        <FormControl isRequired id=\"rating\" mt={5}>\n          <FormLabel>Rating</FormLabel>\n          <Select placeholder=\"How loud?\">\n            <option>Quiet</option>\n            <option>Average</option>\n            <option>Bit Loud</option>\n            <option>Loud</option>\n            <option>Very Loud</option>\n            <option>Very Very Loud</option>\n          </Select>\n        </FormControl>\n        <Button\n          type=\"submit\"\n          variant={\"solid\"}\n          colorScheme={\"teal\"}\n          size={\"md\"}\n          mt={5}\n        >\n          Submit\n        </Button>\n      </Flex>\n    </form>\n  );\n};\n\nexport default Search;\n","import React from \"react\";\nimport {\n  Box,\n  Flex,\n  HStack,\n  IconButton,\n  Link,\n  Button,\n  Menu,\n  MenuList,\n  MenuItem,\n  MenuDivider,\n  useDisclosure,\n  Text,\n} from \"@chakra-ui/react\";\nimport { HamburgerIcon, CloseIcon } from \"@chakra-ui/icons\";\nimport Auth from \"../../utils/auth\";\n\nexport default function Header() {\n  const logout = (event) => {\n    event.preventDefault();\n    Auth.logout();\n  };\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Box>\n        <Flex h={16} alignItems={\"center\"} justifyContent={\"space-between\"}>\n          <IconButton\n            size={\"md\"}\n            icon={isOpen ? <CloseIcon /> : <HamburgerIcon />}\n            aria-label={\"Open Menu\"}\n            display={{ md: \"none\" }}\n            onClick={isOpen ? onClose : onOpen}\n          />\n          <HStack spacing={8} alignItems={\"center\"}>\n            <Link href=\"/\">\n              <Text fontSize=\"sm\" fontWeight=\"bold\">\n                HEARO\n              </Text>\n            </Link>\n          </HStack>\n          <Flex alignItems={\"center\"}>\n            {Auth.loggedIn() ? (\n              <>\n                <Link\n                  href=\"/me\"\n                  variant={\"solid\"}\n                  colorScheme={\"teal\"}\n                  size={\"sm\"}\n                  mr={4}\n                >\n                  Your Dashboard\n                </Link>\n                <Link onClick={logout}>\n                  <Button\n                    variant={\"solid\"}\n                    colorScheme={\"teal\"}\n                    size={\"sm\"}\n                    mr={4}\n                  >\n                    Logout\n                  </Button>\n                </Link>\n              </>\n            ) : (\n              <>\n                <Link\n                  href=\"/login\"\n                  variant={\"solid\"}\n                  colorScheme={\"teal\"}\n                  size={\"sm\"}\n                  mr={4}\n                >\n                  Login\n                </Link>\n                <Link href=\"/signup\">\n                  <Button\n                    variant={\"solid\"}\n                    colorScheme={\"teal\"}\n                    size={\"sm\"}\n                    mr={4}\n                  >\n                    Signup\n                  </Button>\n                </Link>\n              </>\n            )}\n            <Menu>\n              <MenuList>\n                <MenuItem>Link 1</MenuItem>\n                <MenuItem>Link 2</MenuItem>\n                <MenuDivider />\n                <MenuItem>Link 3</MenuItem>\n              </MenuList>\n            </Menu>\n          </Flex>\n        </Flex>\n\n        {isOpen ? <Box pb={4} display={{ md: \"none\" }}></Box> : null}\n      </Box>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Text, Flex } from \"@chakra-ui/react\";\n\nconst Footer = () => {\n  return (\n    <Flex align=\"center\" justify=\"space-between\" wrap=\"wrap\" w=\"100%\" mt={10}>\n      <Text fontSize=\"sm\" fontWeight=\"bold\">\n        HEARO &#169; 2021\n      </Text>\n    </Flex>\n  );\n};\n\nexport default Footer;\n","import { gql } from \"@apollo/client\";\n\nexport const QUERY_USER = gql`\n  query user($username: String!) {\n    user(username: $username) {\n      _id\n      username\n      email\n      places {\n        _id\n        placeName\n        placeLocation\n        createdAt\n      }\n    }\n  }\n`;\n\nexport const QUERY_PLACES = gql`\n  query getPlaces {\n    places {\n      _id\n      placeName\n      placeLocation\n      createdAt\n    }\n  }\n`;\n\nexport const QUERY_SINGLE_PLACE = gql`\n  query getSinglePlace($placeId: ID!) {\n    place(placeId: $placeId) {\n      _id\n      placeName\n      placeLocation\n      createdAt\n    }\n  }\n`;\n\nexport const QUERY_ME = gql`\n  query me {\n    me {\n      _id\n      username\n      email\n      places {\n        _id\n        placeName\n        placeLocation\n        createdAt\n      }\n    }\n  }\n`;\n","import React, { useState } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport {\n  Heading,\n  FormLabel,\n  FormControl,\n  Input,\n  Select,\n  Button,\n  Textarea,\n  Text,\n  Box,\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  AlertDescription,\n  CloseButton,\n} from \"@chakra-ui/react\";\nimport { ADD_PLACE } from \"../utils/mutations\";\n// import { QUERY_PLACES, QUERY_ME } from \"../utils/queries\";\n// import SearchLocationInput from \"../utils/SearchLocationInput\";\n// import SearchLocationInput2 from \"../utils/SearchLocationInput2\";\n\n// import Auth from \"../utils/auth\";\n\nconst PlaceForm = () => {\n  const [formState, setFormState] = useState({\n    placeName: \"\",\n    placeRating: \"\",\n    placeLocation: \"\",\n    placeType: \"\",\n    placeComment: \"\",\n  });\n\n  const [addPlace, { error, data }] = useMutation(ADD_PLACE);\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n    try {\n      const { data } = await addPlace({\n        variables: { ...formState },\n      });\n      console.log(data);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      placeName: \"\",\n      placeRating: \"\",\n      placeLocation: \"\",\n      placeType: \"\",\n      placeComment: \"\",\n    });\n  };\n\n  return (\n    <Box>\n      {data ? (\n        <>\n          <Alert mb={5} status=\"success\">\n            <AlertIcon />\n            <AlertTitle mr={2}>Success!</AlertTitle>\n            <AlertDescription>You have added an entry!</AlertDescription>\n            <CloseButton\n              position=\"absolute\"\n              right=\"8px\"\n              top=\"8px\"\n              // onClick={() => closeButton()}\n            />\n            ;\n          </Alert>\n          <form onSubmit={handleFormSubmit}>\n            <Heading as=\"h3\" color=\"#7FE6D1\" size=\"md\" mb={5}>\n              Rate a place based on how loud it was\n            </Heading>\n            {/* <SearchLocationInput onChange={() => null} />\n             */}\n            <FormControl id=\"name\" mt={5} isRequired>\n              <FormLabel>Name of place</FormLabel>\n              <Input\n                onChange={handleChange}\n                placeholder=\"Name\"\n                name=\"placeName\"\n                value={formState.placeName}\n              />\n            </FormControl>\n\n            <FormControl id=\"suburb\" mt={5} isRequired>\n              <FormLabel>Suburb</FormLabel>\n              <Input\n                onChange={handleChange}\n                placeholder=\"Suburb\"\n                name=\"placeLocation\"\n                value={formState.placeLocation}\n              />\n            </FormControl>\n            <FormControl isRequired id=\"place\" mt={5}>\n              <FormLabel>Type of place</FormLabel>\n              <Select\n                onChange={handleChange}\n                name=\"placeType\"\n                value={formState.placeType}\n                placeholder=\"Select type of place\"\n              >\n                <option>Restaurant</option>\n                <option>Bar</option>\n                <option>Pub</option>\n              </Select>\n            </FormControl>\n            <FormControl isRequired id=\"rating\" mt={5}>\n              <FormLabel>Rating</FormLabel>\n              <Select\n                onChange={handleChange}\n                placeholder=\"Rating\"\n                name=\"placeRating\"\n                value={formState.placeRating}\n              >\n                <option>Quiet</option>\n                <option>Average</option>\n                <option>Bit Loud</option>\n                <option>Loud</option>\n                <option>Very Loud</option>\n                <option>Very Very Loud</option>\n              </Select>\n            </FormControl>\n            <FormControl mt={5} id=\"comment\">\n              <FormLabel>Comment</FormLabel>\n              <Textarea\n                onChange={handleChange}\n                placeholder=\"Comment\"\n                name=\"placeComment\"\n                value={formState.placeComment}\n              />\n            </FormControl>\n            <Button\n              variant={\"solid\"}\n              colorScheme={\"teal\"}\n              size={\"md\"}\n              mt={5}\n              type=\"submit\"\n            >\n              Submit\n            </Button>\n          </form>\n        </>\n      ) : (\n        <form onSubmit={handleFormSubmit}>\n          <Heading as=\"h3\" color=\"#7FE6D1\" size=\"md\" mb={5}>\n            Rate a place based on how loud it was\n          </Heading>\n          {/* <SearchLocationInput onChange={() => null} />\n           */}\n          <FormControl id=\"name\" mt={5} isRequired>\n            <FormLabel>Name of place</FormLabel>\n            <Input\n              onChange={handleChange}\n              placeholder=\"Name\"\n              name=\"placeName\"\n              value={formState.placeName}\n            />\n          </FormControl>\n\n          <FormControl id=\"suburb\" mt={5} isRequired>\n            <FormLabel>Suburb</FormLabel>\n            <Input\n              onChange={handleChange}\n              placeholder=\"Suburb\"\n              name=\"placeLocation\"\n              value={formState.placeLocation}\n            />\n          </FormControl>\n          <FormControl isRequired id=\"place\" mt={5}>\n            <FormLabel>Type of place</FormLabel>\n            <Select\n              onChange={handleChange}\n              name=\"placeType\"\n              value={formState.placeType}\n              placeholder=\"Select type of place\"\n            >\n              <option>Restaurant</option>\n              <option>Bar</option>\n              <option>Pub</option>\n            </Select>\n          </FormControl>\n          <FormControl isRequired id=\"rating\" mt={5}>\n            <FormLabel>Rating</FormLabel>\n            <Select\n              onChange={handleChange}\n              placeholder=\"Rating\"\n              name=\"placeRating\"\n              value={formState.placeRating}\n            >\n              <option>Quiet</option>\n              <option>Average</option>\n              <option>Bit Loud</option>\n              <option>Loud</option>\n              <option>Very Loud</option>\n              <option>Very Very Loud</option>\n            </Select>\n          </FormControl>\n          <FormControl mt={5} id=\"comment\">\n            <FormLabel>Comment</FormLabel>\n            <Textarea\n              onChange={handleChange}\n              placeholder=\"Comment\"\n              name=\"placeComment\"\n              value={formState.placeComment}\n            />\n          </FormControl>\n          <Button\n            variant={\"solid\"}\n            colorScheme={\"teal\"}\n            size={\"md\"}\n            mt={5}\n            type=\"submit\"\n          >\n            Submit\n          </Button>\n          {error && <Text>{error.message}</Text>}\n        </form>\n      )}\n    </Box>\n  );\n};\n\nexport default PlaceForm;\n","import React from \"react\";\nimport {\n  Heading,\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  AlertDescription,\n} from \"@chakra-ui/react\";\nimport { QUERY_USER, QUERY_ME } from \"../utils/queries\";\nimport { Redirect, useParams } from \"react-router-dom\";\nimport { useQuery } from \"@apollo/client\";\nimport Auth from \"../utils/auth\";\nimport PlaceForm from \"../components/PlaceForm\";\n// import PlaceList from \"../components/PlaceList\";\n\nconst Profile = () => {\n  const { username: userParam } = useParams();\n\n  const { loading, data } = useQuery(userParam ? QUERY_USER : QUERY_ME, {\n    variables: { username: userParam },\n  });\n\n  const user = data?.me || data?.user || {};\n  // redirect to personal profile page if username is yours\n  if (Auth.loggedIn() && Auth.getProfile().data.username === userParam) {\n    return <Redirect to=\"/me\" />;\n  }\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (!user?.username) {\n    return (\n      <Alert status=\"error\">\n        <AlertIcon />\n        <AlertTitle mr={2}>You need to be logged in to see this. </AlertTitle>\n        <AlertDescription>\n          Use the navigation links above to sign up or log in!\n        </AlertDescription>\n      </Alert>\n    );\n  }\n\n  return (\n    <>\n      <Heading mb={5}>Hi {Auth.getProfile().data.username}!</Heading>\n      <PlaceForm />\n      <Heading as=\"h3\" color=\"#7FE6D1\" size=\"md\" mt={10} mb={3}>\n        Places you've added to the app.\n      </Heading>\n      {/* <PlaceList places={user.places} /> */}\n    </>\n  );\n};\n\nexport default Profile;\n","import React from 'react';\nimport { Heading, Flex, Text } from '@chakra-ui/react';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport { QUERY_SINGLE_PLACE } from '../utils/queries';\n\nconst PlaceDetails = () => {\n  // Use `useParams()` to retrieve value of the route parameter `:profileId`\n  const { placeId } = useParams();\n\n  const { loading, data } = useQuery(QUERY_SINGLE_PLACE, {\n    // pass URL parameter\n    variables: { placeId: placeId },\n  });\n\n  const place = data?.place || {};\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n    return (\n\n<Flex align=\"center\" justify=\"space-between\" wrap=\"wrap\" w=\"100%\" p={4}>\n\n<Heading>HEARO Place details</Heading>\n<Text>{place.placeName}</Text>\n<Text>{place.placeLocation}</Text>\n<Text>{place.placeRating}</Text>\n<Text>{place.placeComment}</Text>\n\n</Flex>\n\n\n    );\n\n};\n\n\n\n\nexport default PlaceDetails;","import React from \"react\";\nimport {\n  Heading,\n} from \"@chakra-ui/react\";\n\n\nconst NotFound = () => {\n<Heading>Sorry that page does not exist.</Heading>\n\n}\n\n\nexport default NotFound;","import React from \"react\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Flex } from \"@chakra-ui/react\";\nimport Home from \"./pages/Home\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport Search from \"./pages/Search\";\nimport Header from \"./components/Header/Header\";\nimport Footer from \"./components/Footer\";\nimport Profile from \"./pages/Profile\";\nimport PlaceDetails from \"./pages/PlaceDetails\";\nimport NotFound from \"./pages/NotFound\";\n\n// Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: \"/graphql\",\n});\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem(\"id_token\");\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App({ cookies }) {\n  return (\n    <ApolloProvider client={client}>\n      {/* <VStack h=\"100vh\" bg=\"#2D3748\"> */}\n\n      <Flex direction=\"column\" maxW={{ xl: \"1200px\" }} px={5} m=\"0 auto\">\n        <Header />\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/search\" component={Search} />\n            <Route exact path=\"/me\" component={Profile} />\n            <Route exact path=\"/profile/:username\" component={Profile} />\n            <Route exact path=\"/places/:placeId\" component={PlaceDetails} />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/signup\" component={Signup} />\n            <Route exact path=\"/404\" component={NotFound} />\n          </Switch>\n        </Router>\n        <Footer />\n      </Flex>\n      {/* </VStack> */}\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { extendTheme } from \"@chakra-ui/react\";\n// import { mode } from \"@chakra-ui/theme-tools\";\n\nconst config = {\n  initialColorMode: \"dark\",\n  useSystemColorMode: false,\n};\n\n// const styles = {\n//   global: (props) => ({\n//     body: {\n//       color: mode(\"gray.100\")(props),\n//       bg: mode(\"gray.900\")(props),\n//     },\n//   }),\n// };\n\nconst fonts = {\n  // heading: \"Zen Tokyo Zoo\",\n};\n\nconst theme = extendTheme({ fonts, config });\n\nexport default theme;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider, ColorModeScript } from \"@chakra-ui/react\";\nimport theme from \"./utils/theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}